import pefile
import sys

malware_file = sys.argv[1]
pe = pefile.PE(malware_file)

# List of all memory addresses
all_addrs = []
# List of all export function names
all_names = []

if hasattr(pe, 'DIRECTORY_ENTRY_EXPORT'):
    for exp in pe.DIRECTORY_ENTRY_EXPORT.symbols:
        all_addrs.append(exp.address + pe.OPTIONAL_HEADER.ImageBase)
        all_names.append(exp.name)
        #print("%s \t %s \t %s"  % (hex(exp.address + pe.OPTIONAL_HEADER.ImageBase), exp.name, exp.ordinal))

# Sort addresses & names
all_addrs.sort()
all_names.sort()


#check for same address
prev_addr = ''
same_addrs_cnt = 1;
for addr in all_addrs:
    if addr == prev_addr:
        same_addrs_cnt += 1

        if same_addrs_cnt == 3:
            print("Malware detected!! at least three functions have the same memory address: %s" % hex(addr))
    else:
        prev_addr = addr
        same_addrs_cnt = 1

#check for differance in offset
addr_offsets = []
for i in range(1, len(all_addrs)):
    addr_offsets.append(all_addrs[i] - all_addrs[i-1])
addr_offsets.sort()

prev_offset = ''
same_offset_cnt = 1;
for offset in addr_offsets:
    if offset == prev_offset:
        same_offset_cnt += 1

        if same_offset_cnt == 2:
            print("Malware detected!! at least three functions have the same memory offset: %s" % hex(offset))
    else:
        same_offset_cnt = 1
        prev_offset = offset

#check for same name
prev_name = ''
for name in all_names:
    if name == prev_name:
        print("Malware detected!! at least three functions have the same name: %s" % name)
    else:
        print("No Functions have the same name")
        prev_name == name
    break

